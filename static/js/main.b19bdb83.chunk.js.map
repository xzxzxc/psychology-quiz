{"version":3,"sources":["features/quiz/quizStorrage.ts","features/quiz/quizSlice.ts","app/hooks.ts","features/quiz/Question.tsx","features/quiz/Quiz.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["QuizStorrage","test","this","title","description","groups","name","questions","number","value","quizSlice","createSlice","initialState","collection","reducers","answer","state","action","selectQuestions","selectTestQuiz","first","q","payload","questionNumber","actions","quiz","Enumerable","fromSource","selectMany","g","useAppSelector","useSelector","Question","question","dispatch","useDispatch","className","ToggleButtonGroup","type","onChange","val","map","ans_val","ToggleButton","role","Quiz","root","orderBy","select","toArray","App","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","store","configureStore","reducer","counter","counterReducer","quizReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b19bdb83.chunk.js","sourcesContent":["import { QuizCollection, QuizDto } from \"./quizSlice\";\r\n\r\nexport class QuizStorrage {\r\n\r\n  static get collection(): QuizCollection {\r\n    return {\r\n      test: this.test,\r\n    };\r\n  }\r\n\r\n  static get test(): QuizDto {\r\n    return {\r\n      title: \"test title\",\r\n      description: \"test descr\",\r\n      groups: [\r\n        {\r\n          name: \"group 1\",\r\n          questions: [\r\n            {\r\n              number: 1,\r\n              value: \"first q\",\r\n            },\r\n            {\r\n              number: 2,\r\n              value: \"second q\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          name: \"group 2\",\r\n          questions: [\r\n            {\r\n              number: 3,\r\n              value: \"third q\",\r\n            },\r\n            {\r\n              number: 4,\r\n              value: \"fourth q\",\r\n            },\r\n          ],\r\n        }],\r\n    };\r\n  }\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Enumerable, IEnumerable } from \"linq-javascript\";\r\nimport { QuizStorrage } from \"./quizStorrage\";\r\n\r\nexport class QuizDto {\r\n  title!: string;\r\n  description!: string;\r\n  groups!: GroupDto[];\r\n}\r\nexport class GroupDto {\r\n  name!: string;\r\n  questions!: QuestionDto[];\r\n}\r\n\r\nexport class QuestionDto {\r\n  number!: number;\r\n  value!: string;\r\n  answer?: number;\r\n}\r\n\r\nexport class AnswerVm {\r\n  questionNumber!: number;\r\n  value!: number;\r\n}\r\n\r\nexport class QuizCollection {\r\n  test!: QuizDto;\r\n}\r\n\r\nexport const quizSlice = createSlice({\r\n  name: \"quiz\",\r\n  initialState: QuizStorrage.collection,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    answer: (state: QuizCollection, action: PayloadAction<AnswerVm>) => {\r\n      const question = selectQuestions(selectTestQuiz(state)) // TODO:\r\n        .first((q) => q.number === action.payload.questionNumber);\r\n      question.answer = action.payload.value;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { answer } = quizSlice.actions;\r\n\r\nexport const selectQuestions = (quiz: QuizDto): IEnumerable<QuestionDto> =>\r\n  Enumerable.fromSource(quiz.groups).selectMany((g) => g.questions);\r\n\r\nexport const selectTestQuiz = (state: QuizCollection): QuizDto => state.test;\r\n\r\nexport default quizSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\";\r\nimport { ToggleButtonGroup, ToggleButton } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { QuestionDto, answer } from \"./quizSlice\";\r\n\r\nfunction Question({ question }: { question: QuestionDto }) {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div\r\n      className=\"d-flex flex-column\r\n       justify-content-center align-items-center\"\r\n    >\r\n      <h3>\r\n        {question.number}. {question.value}\r\n      </h3>\r\n\r\n      <ToggleButtonGroup\r\n        type=\"radio\"\r\n        name={`btns_${question.number}`}\r\n        onChange={(val) =>\r\n          dispatch(answer({ questionNumber: question.number, value: val }))\r\n        }\r\n      >\r\n        {[1, 2, 3, 4, 5, 6].map((ans_val) => (\r\n          <ToggleButton value={ans_val}>{ans_val}</ToggleButton>\r\n        ))}\r\n      </ToggleButtonGroup>\r\n\r\n      <div className=\"btn-group\" role=\"group\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n","import { selectTestQuiz } from \"./quizSlice\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport Question from \"./Question\";\nimport { Enumerable } from \"linq-javascript\";\n\nexport function Quiz() {\n  const quiz = useAppSelector((root) => selectTestQuiz(root.quiz));\n  \n  const questions = Enumerable.fromSource(quiz.groups)\n    .selectMany((g) => g.questions)\n    .orderBy((q) => q.number)\n    .select(q=><Question question={q}/>)\n    .toArray();\n\n  return (\n    <div className=\"App\">\n      {questions}\n    </div>\n  );\n}\n\nexport default Quiz;\n","import React from 'react';\nimport './App.css';\nimport Quiz from './features/quiz/Quiz';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Quiz />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport quizReducer from '../features/quiz/quizSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    quiz: quizReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}